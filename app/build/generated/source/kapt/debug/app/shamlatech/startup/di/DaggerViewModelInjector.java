// Generated by Dagger (https://google.github.io/dagger).
package app.shamlatech.startup.di;

import android.content.SharedPreferences;
import app.shamlatech.startup.Pref.PrefsMangers;
import app.shamlatech.startup.viewmodel.PostListViewModel;
import app.shamlatech.startup.viewmodel.PostListViewModel_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerViewModelInjector implements ViewModelInjector {
  private Provider<Retrofit> provideRetrofitInterface$app_debugProvider;

  private Provider<PostApi> providePostApi$app_debugProvider;

  private Provider<SharedPreferences> providePreferencesProvider;

  private DaggerViewModelInjector(Builder builder) {
    initialize(builder);
  }

  public static ViewModelInjector.Builder builder() {
    return new Builder();
  }

  private PrefsMangers getPrefsMangers() {
    return new PrefsMangers(providePreferencesProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideRetrofitInterface$app_debugProvider =
        SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_debugFactory.create());
    this.providePostApi$app_debugProvider =
        SingleCheck.provider(
            NetworkModule_ProvidePostApi$app_debugFactory.create(
                provideRetrofitInterface$app_debugProvider));
    this.providePreferencesProvider =
        DoubleCheck.provider(
            SharedPreferencesModule_ProvidePreferencesFactory.create(
                builder.sharedPreferencesModule));
  }

  @Override
  public void inject(PostListViewModel postListViewModel) {
    injectPostListViewModel(postListViewModel);
  }

  private PostListViewModel injectPostListViewModel(PostListViewModel instance) {
    PostListViewModel_MembersInjector.injectPostApi(
        instance, providePostApi$app_debugProvider.get());
    PostListViewModel_MembersInjector.injectMPrefsMangers(instance, getPrefsMangers());
    return instance;
  }

  private static final class Builder implements ViewModelInjector.Builder {
    private SharedPreferencesModule sharedPreferencesModule;

    @Override
    public ViewModelInjector build() {
      if (sharedPreferencesModule == null) {
        throw new IllegalStateException(
            SharedPreferencesModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerViewModelInjector(this);
    }

    /**
     * This module is declared, but an instance is not used in the component. This method is a
     * no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Override
    public Builder networkModule(NetworkModule networkModule) {
      return this;
    }

    @Override
    public Builder prefsModule(SharedPreferencesModule sharedPreferencesModule) {
      this.sharedPreferencesModule = Preconditions.checkNotNull(sharedPreferencesModule);
      return this;
    }
  }
}
